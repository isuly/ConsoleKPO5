using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleKPO5
{
    class HeapSort
    {
        //конструктор
        public HeapSort()
        { }
        //метод сортировки (получает массив и его размер), возвращает отсортированный массив
        public int[] Sort(int[] mass, int size)
        {
            //{
            //ЭТАП 1: 
            //для каждого элемента массива находится его новое расположение в массиве таким образом, чтобы выполнялись условия пирамиды.


            //разделяем исходный массив на две половины: левую с индексами от 0 до[n / 2]-1, и правую с индексами от[n / 2] до n-1
            //перебираем первую часть массива с конца
            //{
            /*
                 * Выбираем потомки iго элемента с индексами [2 * i + 1] и [2 * i + 2] и проверяем их принадлежность массиву
                  * {
                     * выбираем из них наибольший
                     * сравниваем элемент текущий элемент из левой части с наибольшим из потомков: 
                     * если он меньше, то меняем эти элементы в массиве местами для получения фрагмента пирамиды; 
                         * {
                             * если обмент совершается с потомком который сам не имеет потомков
                              * {
                                  * элемент и его потомок меняются местами
                              * }
                             * В противном случае:(у потомка элемента с которым призводится обмен есть свои потомки)
                             * {
                                    * элемент и его потомок меняются местами
                                    * определяем больший из его потомков
                                    * объяывляем флаг для оставновки перебора потомков
                                    * проверяем выполнение условия (элемент больше большего потомка) пока не достигнем дна пирамиды или пока флаг не будет равен 1:
                                    * если условие не выполняется
                                        *{
                                          * меняем их местами
                                        *}
                                    * если условие выполняется (элемент больше его потомков)
                                         * {
                                             * устанавливаем флаг остановки в 1
                                         * }
                             * }
                         * }
             * в противном случае оставляем все  без изменений
             * }

             */
            //}


            //ЭТАП 2
            //ПРОСЕИВАНИЕ ЧЕРЕЗ ПИРАМИДУ

            /*Для всех элементов массива-пирамиды с конца выполняем просеивание через пирамиду:
             * {
                  *меняем местами первый и последний элемент неотсортированной части массива 
                  * уменьшаем размер неотсортированной части на 1 (последний-больший элемент уже на ствоем месте)
                   *просеиваем ставший первым элемент через пирамиду:
                   *
                   *Пока у элемента есть потомки или пока он не встанет на свое место:
                    * {
                    * выбирам наибольший из его потомков
                    * сравниваем просеиваемый элемент с наибольшим потомком
                    * если просеиваемый элемент меньше большего потомка
                        * меняем их местами
                    * если просеиваемый элемент больше обоих потомков
                        * устанавливаем флаг остановки в 1
                    * }
             * }
             */
            //}
            return mass;
        }
    }
}
